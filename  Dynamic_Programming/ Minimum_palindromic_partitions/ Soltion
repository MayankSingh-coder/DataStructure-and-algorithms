 int minCut(string s) 
    {
        if(s.size() < 2)
            return 0;
        vector<vector<int>> isPalindrome(s.size(), vector<int>(s.size()));
        vector<int> min_cut(s.size() + 1, s.size());
        min_cut[0] = -1;

        for(int i = 0; i < s.size(); i++)
        {
            isPalindrome[i][i] = 1;
            if(i + 1 < s.size())
                isPalindrome[i][i + 1] = s[i] == s[i + 1];
        }
          
        for(int k = 2; k < s.size(); k++)
            for(int i = 0; i + k < s.size(); i++)
                isPalindrome[i][i + k] = (s[i] == s[i + k] && isPalindrome[i + 1][i + k - 1]);

        
        for(int end = 0; end < s.size(); end++)
            for(int begin = end; begin >= 0; begin--)
                if(isPalindrome[begin][end])
                    min_cut[end + 1] = min(min_cut[end + 1], min_cut[begin] + 1);   
        
        return min_cut.back();
    }